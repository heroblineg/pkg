#!/bin/bash
#
# PKG Command - pkg
# Copyright (c) 2025 [AM Linux Team]
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# Check if the script is run as root
if [ "$EUID" -ne 0 ]; then
  exec sudo "$0" "$@"
fi

# Localized messages
en_messages=(
  "pkg: Package management command"
  "Options:"
  "-i: Install a package"
  "-p: Purge a package"
  "-s: Install requested package only (ignore dependencies)"
  "-c: Autoremove unnecessary packages"
  "Package '%s' is already installed."
  "Options:"
  "update: Update the package"
  "remove: Remove the package"
  "What would you like to do? (update/remove): "
  "Invalid option."
  "Package '%s' is not installed."
  "Options:"
  "install: Install the package"
  "ignore: Install the package ignoring dependencies"
  "What would you like to do? (install/ignore): "
)

ja_messages=(
  "pkg: パッケージ管理コマンド"
  "オプション:"
  "-i: パッケージをインストール"
  "-p: パッケージをパージ"
  "-s: 要求されたパッケージのみインストール (依存関係無視)"
  "-c: 不要なパッケージを自動削除"
  "パッケージ '%s' は既にインストールされています。"
  "オプション:"
  "update: パッケージを更新する"
  "remove: パッケージを削除する"
  "どうしますか？ (update/remove): "
  "無効なオプションです。"
  "パッケージ '%s' はインストールされていません。"
  "オプション:"
  "install: パッケージをインストールする"
  "ignore: 依存関係を無視してパッケージをインストールする"
  "どうしますか？ (install/ignore): "
)

# Detect language
lang=$(locale | grep LANG | cut -d= -f2 | cut -d_ -f1)
if [ "$lang" == "ja" ]; then
  messages=("${ja_messages[@]}")
else
  messages=("${en_messages[@]}")
fi

# Function to display help
show_help() {
  echo "${messages[0]}"
  echo "${messages[1]}"
  echo "  ${messages[2]}"
  echo "  ${messages[3]}"
  echo "  ${messages[4]}"
  echo "  ${messages[5]}"
}

# Initialize variables
PACKAGE=""
ACTION=""
FLAGS=()

# Parse arguments
for arg in "$@"; do
  case "$arg" in
    -i|-p|-s|-c)
      FLAGS+=("$arg")
      ;;
    *)
      if [ -z "$PACKAGE" ]; then
        PACKAGE="$arg"
      else
        ACTION="$arg"
      fi
      ;;
  esac
done

# Execute based on flags and package
for flag in "${FLAGS[@]}"; do
  case "$flag" in
    -i)
      apt-get install "$PACKAGE"
      exit 0
      ;;
    -p)
      apt-get purge "$PACKAGE"
      exit 0
      ;;
    -s)
      apt-get install --no-install-recommends "$PACKAGE"
      exit 0
      ;;
    -c)
      apt-get autoremove
      exit 0
      ;;
  esac
done

# If no flags are provided, show help or interactive prompt
if [ -z "$PACKAGE" ]; then
  show_help
else
  INSTALLED=$(dpkg -l | grep "^ii" | grep "$PACKAGE")
  if [ -n "$INSTALLED" ]; then
    printf "${messages[6]}" "$PACKAGE"
    echo
    echo "${messages[7]}"
    echo "  ${messages[8]}"
    echo "  ${messages[9]}"
    read -p "${messages[10]}" ACTION
    case "$ACTION" in
      update)
        apt-get install --only-upgrade "$PACKAGE"
        ;;
      remove)
        apt-get purge "$PACKAGE"
        ;;
      *)
        echo "${messages[11]}"
        ;;
    esac
  else
    printf "${messages[12]}" "$PACKAGE"
    echo
    echo "${messages[13]}"
    echo "  ${messages[14]}"
    echo "  ${messages[15]}"
    read -p "${messages[16]}" ACTION
    case "$ACTION" in
      install)
        apt-get install "$PACKAGE"
        ;;
      ignore)
        apt-get install --no-install-recommends "$PACKAGE"
        ;;
      *)
        echo "${messages[11]}"
        ;;
    esac
  fi
fi
